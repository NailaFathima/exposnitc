//PROCESS MANAGER MODULE

alias functionNum R1;
alias currentPID R2;


//FREE USER AREA PAGE
if(functionNum == 2) then
	multipush(R0, R1, R2, R3);
	R1 = 2;
	R2 = [PROCESS_TABLE + (currentPID * 16) + 11];
	call MEMORY_MANAGER;
	multipop(R0, R1, R2, R3);
	return;
endif;


//EXIT function
if(functionNum == 3) then
	multipush(R0, R1, R2, R3);
	R1 = 4;
	R2 = currentPID;
	call PROCESS_MANAGER;
	R1 = 2;
	R2 = currentPID;
	call PROCESS_MANAGER;
	multipop(R0, R1, R2, R3);
	[PROCESS_TABLE + (currentPID * 16) + 4] = TERMINATED;
	return;
endif;

//FREE PAGE TABLE
if(functionNum == 4) then
	multipush(R0,R1,R2,R3);
	PTBR = [PROCESS_TABLE + (currentPID * 16) + 14];
	PTLR = [PROCESS_TABLE + (currentPID * 16) + 15];
	
	//LIBRARY
	[PTBR+0] = -1;
	[PTBR+1] = "0000";
	[PTBR+2] = -1;
	[PTBR+3] = "0000";
	
	R3 = 4;
	while( R3 != 20 ) do
		if( [PTBR+R3] != -1 ) then
			multipush(R0,R1,R2,R3);
			R1 = 2;
			R2 = [PTBR + R3];
			call MEMORY_MANAGER;
			multipop(R0,R1,R2,R3);
			
			[PTBR + R3] = -1;
			[PTBR + R3 + 1] = "0000";
			
		endif;
		
		R3 = R3 + 2;
	endwhile;

    //resetting disk map TABLE

    R3 = 0;
    while(R3 < 10) do   
        if(R3==2 || R2==3|| R3 ==8 || R3 ==9) then
            if([DISK_MAP_TABLE + R3] != -1) then
                multipush(R0,R1,R2,R3,R4,R5,R6,R7);
                R1 = 4;
                R2 = [DISK_MAP_TABLE + R3];
                R3 = [SYSTEM_STATUS_TABLE + 1];
                call MEMORY_MANAGER;
                multipop(R0, R1,R2,R3,R4,R5,R6,R7);
            endif;
            [DISK_MAP_TABLE + R3] = -1;
        endif;
        R3 = R3 + 1;
    endwhile;
	multipop(R0, R1, R2, R3);
	return;
	
endif;