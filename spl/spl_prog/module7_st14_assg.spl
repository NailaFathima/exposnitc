//loading init from disk to memory
loadi(65,7);
loadi(66,8);

//loading int 10 module from disk to memory
loadi(22,35);
loadi(23,36);

//loading exception handler routine from disk to memory
loadi(2, 15);
loadi(3, 16);

//loading library from disk to memory
loadi(63,13);
loadi(64,14);

//loading timer interrupt from disk to memory
loadi(4, 17);
loadi(5, 18);

//loading int7 from disk to memory
loadi(16,29);
loadi(17,30);

//loading exec code i.e even no.s code
loadi(83,69);

//loading exec code i.e prime no.s code
loadi(89,70);

//loading MODULE 5 - scheduler
loadi(50,63);
loadi(51,64);


//------INIT Program------

//filling details in the process table


PTBR = PAGE_TABLE_BASE + 20;
PTLR = 10;

[PROCESS_TABLE + 16 + 1] = 1;
[PROCESS_TABLE + 16 + 4] = CREATED;
[PROCESS_TABLE + 16 + 11] = 80;
[PROCESS_TABLE + 16 + 12] = 0;
[PROCESS_TABLE + 16 + 13] = 8*512;
[PROCESS_TABLE + 16 + 14] = PAGE_TABLE_BASE + 20;
[PROCESS_TABLE + 16 + 15] = 10;

//LIBRARY
[PAGE_TABLE_BASE + 20 +0] = 63;
[PAGE_TABLE_BASE + 20 +1] = "0100";
[PAGE_TABLE_BASE + 20 +2] = 64;
[PAGE_TABLE_BASE + 20 +3] = "0100";

//HEAP
[PAGE_TABLE_BASE + 20 +4] = 78;
[PAGE_TABLE_BASE + 20 +5] = "0110";
[PAGE_TABLE_BASE + 20 +6] = 79;
[PAGE_TABLE_BASE + 20 +7] = "0110";

//CODE
[PAGE_TABLE_BASE + 20 +8] = 65;
[PAGE_TABLE_BASE + 20 +9] = "0100";
[PAGE_TABLE_BASE + 20 +10] = 66;
[PAGE_TABLE_BASE + 20 +11] = "0100";
[PAGE_TABLE_BASE + 20 +12] = -1;
[PAGE_TABLE_BASE + 20 +13] = "0000";
[PAGE_TABLE_BASE + 20 +14] = -1;
[PAGE_TABLE_BASE + 20 +15] = "0000";

//STACK
[PAGE_TABLE_BASE + 20 +16] = 76;
[PAGE_TABLE_BASE + 20 +17] = "0110";
[PAGE_TABLE_BASE + 20 +18] = 77;
[PAGE_TABLE_BASE + 20 +19] = "0110";

//first entry of init stack
[76*512] = [65 * 512 + 1];


//---EXEC PROCESS---EVEN NUMBERS

PTBR = PAGE_TABLE_BASE + 40;
PTLR = 10;

//library
[PTBR + 0] = 63;
[PTBR + 1] = "0100";
[PTBR + 2] = 64;
[PTBR + 3] = "0100";

//Heap
[PTBR + 4] = 84;
[PTBR + 5] = "0110";
[PTBR + 6] = 85;
[PTBR + 7] = "0110";

//Code
[PTBR + 8] = 83;
[PTBR + 9] = "0100";
[PTBR + 10] = -1;
[PTBR + 11] = "0000";
[PTBR + 12] = -1;
[PTBR + 13] = "0000";
[PTBR + 14] = -1;
[PTBR + 15] = "0000";

//STACK;
[PTBR + 16] = 86;
[PTBR + 17] = "0110";
[PTBR + 18] = 87;
[PTBR + 19] = "0110";

//setting up the process table
[PROCESS_TABLE + 32 + 1] = 2;
[PROCESS_TABLE + 32 + 4] = CREATED;
[PROCESS_TABLE + 32 + 11] = 88;
[PROCESS_TABLE + 32 + 12] = 0;
[PROCESS_TABLE + 32 + 13] = 8*512;
[PROCESS_TABLE + 32 + 14] = PTBR;
[PROCESS_TABLE + 32 + 15] = 10;

[86*512] = [83*512 + 1];


//EXEC PROCESS ---- PRIME NUMBERS

PTBR = PAGE_TABLE_BASE + 60;
PTLR = 10;

//library
[PTBR + 0] = 63;
[PTBR + 1] = "0100";
[PTBR + 2] = 64;
[PTBR + 3] = "0100";

//Heap
[PTBR + 4] = 90;
[PTBR + 5] = "0110";
[PTBR + 6] = 91;
[PTBR + 7] = "0110";

//Code
[PTBR + 8] = 89;
[PTBR + 9] = "0100";
[PTBR + 10] = -1;
[PTBR + 11] = "0000";
[PTBR + 12] = -1;
[PTBR + 13] = "0000";
[PTBR + 14] = -1;
[PTBR + 15] = "0000";

//STACK;
[PTBR + 16] = 92;
[PTBR + 17] = "0110";
[PTBR + 18] = 93;
[PTBR + 19] = "0110";

//setting up the process table
[PROCESS_TABLE + 48 + 1] = 3;
[PROCESS_TABLE + 48 + 4] = CREATED;
[PROCESS_TABLE + 48 + 11] = 94;
[PROCESS_TABLE + 48 + 12] = 0;
[PROCESS_TABLE + 48 + 13] = 8*512;
[PROCESS_TABLE + 48 + 14] = PTBR;
[PROCESS_TABLE + 48 + 15] = 10;

[92*512] = [89*512 + 1];

//SET ALL OTHER PROCESSES TO TERMINATED

[PROCESS_TABLE + 16*4 + 4] = TERMINATED;
[PROCESS_TABLE + 16*5 + 4] = TERMINATED;
[PROCESS_TABLE + 16*6 + 4] = TERMINATED;
[PROCESS_TABLE + 16*7 + 4] = TERMINATED;
[PROCESS_TABLE + 16*8 + 4] = TERMINATED;
[PROCESS_TABLE + 16*9 + 4] = TERMINATED;
[PROCESS_TABLE + 16*10 + 4] = TERMINATED;
[PROCESS_TABLE + 16*11 + 4] = TERMINATED;
[PROCESS_TABLE + 16*12 + 4] = TERMINATED;
[PROCESS_TABLE + 16*13 + 4] = TERMINATED;
[PROCESS_TABLE + 16*14 + 4] = TERMINATED;
[PROCESS_TABLE + 16*15 + 4] = TERMINATED;

return;



