//DISK DEVICE MANAGER MODULE

alias functionNum R1;

//Disk load

if(functionNum == 2) then
	alias currentPID R2;
	alias pageNo R3;
	alias BlockNo R4;
	
	multipush(R1,R2,R3,R4);
	functionNum = 3;
	R2 = currentPID;
	call RESOURCE_MANAGER;
	multipop(R1,R2,R3,R4);
	
	//DISK STATUS TABLE
	//Load / store bit
	
	[DISK_STATUS_TABLE + 1] = 0;
	
	//PageNo
	[DISK_STATUS_TABLE + 2] = pageNo;
	
	//BlockNo
	[DISK_STATUS_TABLE + 3] = BlockNo;
	
	load(pageNo, BlockNo);
	
	[PROCESS_TABLE + (currentPID*16) + 4] = WAIT_DISK;
	
	//multipush(R1,R2,R3,R4);
	call SCHEDULER;
	//multipop(R1,R2,R3,R4);
	return;
	
endif;
	

//Terminal_write
if(functionNum == 3) then
	
	alias word R3;
	
	//calling Acquire Terminal
	multipush(R1,R2,R3,R4);
	functionNum = 8;
	call RESOURCE_MANAGER;
	multipop(R1,R2,R3,R4);
	print word;
	
	//calling release Terminal
	multipush(R0,R1,R2,R3);
	functionNum = 9;
	call RESOURCE_MANAGER;
	multipop(R0,R1,R2,R3);
endif;


//terminal_Read
if(functionNum == 4) then

	alias word R3;
	alias currentPid R2;
	alias physicalwordaddr R4;

	multipush(R1,R2,R3,R4);
	functionNum = 8;
	call RESOURCE_MANAGER;
	multipop(R1,R2,R3,R4);
	//breakpoint;
	read;
	[PROCESS_TABLE + (currentPid * 16) + 4] = WAIT_TERMINAL;
	
	multipush(R1,R2,R3,R4);
	call SCHEDULER;
	multipop(R1,R2,R3,R4);
	
	physicalwordaddr = ([PTBR + 2 * ((word)/ 512)] * 512) + ((word) % 512);

        [physicalwordaddr] = [PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 8];
	
endif;

return;
